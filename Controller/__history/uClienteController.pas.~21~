unit uClienteController;

interface

uses
uClienteModel, System.SysUtils, DmConexao,
Data.DB, Data.SqlExpr, FireDAC.Phys.PGDef,
FireDAC.Stan.Intf, FireDAC.Phys, FireDAC.Phys.PG, FireDAC.Stan.Option,
FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.VCLUI.Wait, FireDAC.Comp.Client,
FireDAC.Phys.SQLite,
FireDAC.Phys.SQLiteDef, FireDAC.Stan.ExprFuncs,
FireDAC.Phys.SQLiteWrapper.Stat, Data.DbxSqlite, FireDAC.Stan.Param,
FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt, FireDAC.Comp.DataSet,
Datasnap.DBClient, Datasnap.Provider;

type
  TClienteController = class
  private
   ConexaoSQL: TFDConnection;
  public
    procedure Pesquisar(sNome: String);
    procedure CarregarCliente(oCliente: TCliente; iCodigo: String);
    function InserirCliente(oCliente: TCliente; sErro: String): Boolean;
    function ExcluirCliente(iCodigo: Integer; sErro: String): Boolean;
    function AlterarCliente(oCliente: TCliente; sErro: String): Boolean;
  end;

implementation

procedure TClienteController.CarregarCliente(oCliente: TCliente; iCodigo: String);
begin
   oCliente.CarregarCliente(oCliente, iCodigo );
end;

function TClienteController.InserirCliente(oCliente: TCliente;sErro: String): Boolean;
  var
  qryInsert : TFDQuery;
  tx :  TFDTransaction;
begin
  try
    Result := True;
    qryInsert := TFDQuery.Create(nil);
    qryInsert.Connection:= dmConexao.dmGeral.FDConnection;
    qryInsert.SQL.Clear;
    qryInsert.SQL.Add('INSERT INTO Cliente (nome,data_nascimento,documento,telefone,email)');
    qryInsert.SQL.Add('VALUES(:nome,:data_nascimento,:documento,:telefone,:email);');
    qryInsert.ParamByName('Nome')           .AsString := oCliente.Nome;
    qryInsert.ParamByName('data_nascimento').AsString := oCliente.data_nascimento;
    qryInsert.ParamByName('documento')      .AsString := oCliente.documento;
    qryInsert.ParamByName('telefone')       .AsString := oCliente.telefone;
    qryInsert.ParamByName('email')          .AsString := oCliente.email;
    tx := TFDTransaction.Create(nil);
    try
      tx.Connection := qryInsert.Connection;
      tx.StartTransaction; // Iniciar a transação
      try
        qryInsert.ExecSQL; // Executar a query
        tx.Commit; // Commitar a transação
        Result := True; // Se chegou até aqui sem exceção, operação foi bem sucedida
      except
        on E: Exception do
        begin
          sErro := E.Message; // Capturar mensagem de erro
          tx.Rollback; // Reverter a transação em caso de erro
        end;
      end;
    finally
      tx.Free; // Liberar a transação
    end;
  finally
    FreeAndNil(qryInsert)
  end;

end;


procedure TClienteController.Pesquisar(sNome: String);
begin

end;

function TClienteController.ExcluirCliente(iCodigo: Integer;sErro: String): Boolean;
 var
  qryDelete : TFDQuery;
  tx :  TFDTransaction;
begin
   try
   if dmconexao.dmGeral.qCliente.Active then
    dmconexao.dmGeral.qCliente.Active := false;

    Result := True;
    qryDelete := TFDQuery.Create(nil);
    qryDelete.Connection:= dmConexao.dmGeral.FDConnection;
    qryDelete.SQL.Clear;
    qryDelete.SQL.Add('DELETE From Cliente Where id_cliente = :iCodigo');
    qryDelete.ParamByName('iCodigo').AsInteger := iCodigo;
    tx := TFDTransaction.Create(nil);
    try
      tx.Connection := qryDelete.Connection;
      tx.StartTransaction; // Iniciar a transação
      try
        qryDelete.ExecSQL; // Executar a query
        tx.Commit; // Commitar a transação
        Result := True; // Se chegou até aqui sem exceção, operação foi bem sucedida
      except
        on E: Exception do
        begin
          sErro := E.Message; // Capturar mensagem de erro
          tx.Rollback; // Reverter a transação em caso de erro
        end;
      end;
    finally
      tx.Free; // Liberar a transação
    end;
  finally
    FreeAndNil(qryDelete)
  end;
end;

function TClienteController.AlterarCliente(oCliente: TCliente;sErro: String): Boolean;
var
  qryAlterar : TFDQuery;
  tx :  TFDTransaction;
begin
  try
    Result := True;
    qryAlterar := TFDQuery.Create(nil);
    qryAlterar.Connection:= dmConexao.dmGeral.FDConnection;
    qryAlterar.SQL.Clear;
    qryAlterar.SQL.Add('UPDATE Cliente SET Nome = :Nome, Documento = :Documento, Email = :Email, data_nascimento = :data_nascimento, telefone = :telefone');
    qryAlterar.SQL.Add(' WHERE ID_CLIENTE = :ID_CLIENTE');
    qryAlterar.ParamByName('Nome').AsString            :=  oCliente.Nome;
    qryAlterar.ParamByName('documento').AsString       :=  oCliente.documento;
    qryAlterar.ParamByName('email').AsString           :=  oCliente.email;
    qryAlterar.ParamByName('data_nascimento').AsString :=  oCliente.data_nascimento;
    qryAlterar.ParamByName('telefone').AsString        :=  oCliente.telefone;
    qryAlterar.ParamByName('ID_CLIENTE').AsInteger     :=  oCliente.ID_CLIENTE;
    tx := TFDTransaction.Create(nil);
    try
      tx.Connection := qryAlterar.Connection;
      tx.StartTransaction; // Iniciar a transação
      try
        qryAlterar.ExecSQL; // Executar a query
        tx.Commit; // Commitar a transação
        Result := True; // Se chegou até aqui sem exceção, operação foi bem sucedida
      except
        on E: Exception do
        begin
          sErro := E.Message; // Capturar mensagem de erro
          tx.Rollback; // Reverter a transação em caso de erro
        end;
      end;
    finally
      tx.Free; // Liberar a transação
    end;
  finally
    FreeAndNil(qryAlterar)
  end;

end;
end.

