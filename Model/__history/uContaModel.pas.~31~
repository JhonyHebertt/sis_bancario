unit uContaModel;

interface

uses
  System.SysUtils, DmConexao, Data.DB, Data.SqlExpr, FireDAC.Stan.Intf, FireDAC.Phys,
  FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.Comp.Client,
  FireDAC.Phys.SQLite, FireDAC.Phys.SQLiteDef;


type
  TConta = class

  private
    Fid_conta: Integer;
    Fid_cliente: Integer;
    FNome_banco: String;
    fNome_Cliente: String;
    FConta: String;

  public
    property id_conta: Integer read Fid_conta write Fid_conta;
    property id_cliente: Integer read FID_Cliente write Fid_Cliente;
    property Nome_banco: String read FNome_banco write FNome_banco;
    property Nome_cliente: String read FNome_cliente write FNome_Cliente;
    property Conta: String read FConta write FConta;

    procedure Pesquisar(sBanco: String);
    procedure CarregarConta(oConta: TConta; iCodigo: String);
    function InserirConta(oConta: TConta; sErro: String): Boolean;
    function ExcluirConta(iCodigo: Integer; sErro: String): Boolean;
    function AlterarConta(oConta: TConta; sErro: String): Boolean;
  end;

implementation

{ TConta }

function TConta.AlterarConta(oConta: TConta; sErro: String): Boolean;
var
  qryAlterar : TFDQuery;
  tx :  TFDTransaction;
begin
  try
    Result := True;
    qryAlterar := TFDQuery.Create(nil);
    qryAlterar.Connection:= dmConexao.dmGeral.FDConnection;
    qryAlterar.SQL.Clear;
    qryAlterar.SQL.Add('UPDATE conta SET id_cliente = :id_cliente, nome_banco = :nome_banco, conta = :conta');
    qryAlterar.SQL.Add(' WHERE id_conta = :id_conta');
    qryAlterar.ParamByName('id_cliente').AsInteger :=  oConta.id_cliente;
    qryAlterar.ParamByName('nome_banco').AsString  :=  oConta.nome_banco;
    qryAlterar.ParamByName('conta')     .AsString  :=  oConta.conta;
    qryAlterar.ParamByName('id_conta')  .AsInteger :=  oConta.id_conta;
    tx := TFDTransaction.Create(nil);
    try
      tx.Connection := qryAlterar.Connection;
      tx.StartTransaction; // Iniciar a transação
      try
        qryAlterar.ExecSQL; // Executar a query
        tx.Commit; // Commitar a transação
        Result := True; // Se chegou até aqui sem exceção, operação foi bem sucedida
      except
        on E: Exception do
        begin
          sErro := E.Message; // Capturar mensagem de erro
          tx.Rollback; // Reverter a transação em caso de erro
        end;
      end;
    finally
      tx.Free; // Liberar a transação
    end;
  finally
    FreeAndNil(qryAlterar)
  end;

end;

procedure TConta.CarregarConta(oConta: TConta; iCodigo: String);
var
  qrySelect : TFDQuery;
  tx :  TFDTransaction;
begin
  qrySelect := TFDQuery.Create(nil);
  qrySelect.Connection:= dmConexao.dmGeral.FDConnection;
  qrySelect.SQL.Clear;
  qrySelect.SQL.Add('Select con.*, cli.nome as nome_cliente from conta as con inner join cliente as cli on cli.id_cliente = con.id_cliente where id_conta = :iCodigo');
  qrySelect.ParamByName('iCodigo').AsString := iCodigo;
  tx := TFDTransaction.Create(nil);
    try
      tx.Connection := qrySelect.Connection;
      tx.StartTransaction; // Iniciar a transação
      tx := TFDTransaction.Create(nil);
      try
          tx.Connection := qrySelect.Connection;
          tx.StartTransaction; // Iniciar a transação
          try
            qrySelect.Open; // Abrir a consulta SQL
            if not qrySelect.IsEmpty then
              begin
                oConta.id_conta     := qrySelect.FieldByName('id_conta').AsInteger;
                oConta.id_cliente   := qrySelect.FieldByName('id_cliente').AsInteger;
                oConta.Nome_banco   := qrySelect.FieldByName('Nome_banco').AsString;
                oConta.Nome_cliente := qrySelect.FieldByName('Nome_cliente').AsString;
                oConta.conta        := qrySelect.FieldByName('conta').AsString;
              end;
              tx.Commit; // Commitar a transação
            except
              on E: Exception do
              begin
                tx.Rollback; // Reverter a transação em caso de erro
              end;
          end;
        finally
          tx.Free; // Liberar a transação
      end;
    finally
    end;

end;

function TConta.ExcluirConta(iCodigo: Integer; sErro: String): Boolean;
var
  qryDelete : TFDQuery;
  tx :  TFDTransaction;
begin
   try
   if dmconexao.dmGeral.qConta.Active then
    dmconexao.dmGeral.qConta.Active := false;
    Result := True;
    qryDelete := TFDQuery.Create(nil);
    qryDelete.Connection:= dmConexao.dmGeral.FDConnection;
    qryDelete.SQL.Clear;
    qryDelete.SQL.Add('DELETE From conta Where id_conta = :iCodigo');
    qryDelete.ParamByName('iCodigo').AsInteger := iCodigo;
    tx := TFDTransaction.Create(nil);
    try
      tx.Connection := qryDelete.Connection;
      tx.StartTransaction; // Iniciar a transação
      try
        qryDelete.ExecSQL; // Executar a query
        tx.Commit; // Commitar a transação
        Result := True; // Se chegou até aqui sem exceção, operação foi bem sucedida
      except
        on E: Exception do
        begin
          sErro := E.Message; // Capturar mensagem de erro
          tx.Rollback; // Reverter a transação em caso de erro
        end;
      end;
    finally
      tx.Free; // Liberar a transação
    end;
  finally
    FreeAndNil(qryDelete)
  end;

end;

function TConta.InserirConta(oConta: TConta; sErro: String): Boolean;
  var
  qryInsert : TFDQuery;
  tx :  TFDTransaction;
begin
  try
    Result := True;

    if dmconexao.dmGeral.qConta.Active then
      dmconexao.dmGeral.qConta.Active := false;
    qryInsert := TFDQuery.Create(nil);
    qryInsert.Connection:= dmConexao.dmGeral.FDConnection;
    qryInsert.SQL.Clear;
    qryInsert.SQL.Add('INSERT INTO conta ( id_cliente, nome_banco, conta )');
    qryInsert.SQL.Add(' VALUES ( :id_cliente, :nome_banco, :conta );');
    qryInsert.ParamByName('id_cliente').AsInteger := oConta.id_cliente;
    qryInsert.ParamByName('nome_banco').AsString := oConta.nome_banco;
    qryInsert.ParamByName('conta')     .AsString := oConta.conta;
    tx := TFDTransaction.Create(nil);
    try
      tx.Connection := qryInsert.Connection;
      tx.StartTransaction; // Iniciar a transação
      try
        qryInsert.ExecSQL; // Executar a query
        tx.Commit; // Commitar a transação
        Result := True; // Se chegou até aqui sem exceção, operação foi bem sucedida
      except
        on E: Exception do
        begin
          sErro := E.Message; // Capturar mensagem de erro
          tx.Rollback; // Reverter a transação em caso de erro
          Result := False;
        end;
      end;
    finally
      tx.Free; // Liberar a transação
    end;
  finally
    FreeAndNil(qryInsert);
    if not dmconexao.dmGeral.qConta.Active then
      dmconexao.dmGeral.qConta.Active := true;
  end;

end;

procedure TConta.Pesquisar(sBanco: String);
begin
 {  if not dmconexao.dmGeral.qListConta.Active then
    dmconexao.dmGeral.qListConta.Active := true;

    if sBanco	 <> '' then
      dmconexao.dmGeral.qListConta.SQL.Text:= 'SELECT cl.nome as nome_cliente, co.nome_banco, co.conta FROM conta as co left join cliente as cl on cl.id_cliente = co.id_cliente; where nome_banco like ' + Chr( 39 ) + '%' + sBanco + '%' + Chr( 39 ) + ' order by 1'
    else
      dmconexao.dmGeral.qListConta.SQL.Text:= 'SELECT cl.nome as nome_cliente, co.nome_banco, co.conta FROM conta as co left join cliente as cl on cl.id_cliente = co.id_cliente;';

    dmconexao.dmGeral.qListConta.Active := false;
    dmconexao.dmGeral.qListConta.Open;    }
if not dmconexao.dmGeral.qConta.Active then
    dmconexao.dmGeral.qConta.Active := true;

    if sBanco	 <> '' then
      dmconexao.dmGeral.qConta.SQL.Text:= 'SELECT * FROM conta where nome_banco like ' + Chr( 39 ) + '%' + sBanco + '%' + Chr( 39 ) + ' order by 1'
    else
      dmconexao.dmGeral.qConta.SQL.Text:= 'SELECT * FROM conta order by 1';

    dmconexao.dmGeral.qConta.Active := false;
    dmconexao.dmGeral.qConta.Open;
end;

end.
